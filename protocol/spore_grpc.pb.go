// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SporeClient is the client API for Spore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SporeClient interface {
	// Sends a greeting
	Send(ctx context.Context, in *SendTransaction, opts ...grpc.CallOption) (*SendTransactionReply, error)
}

type sporeClient struct {
	cc grpc.ClientConnInterface
}

func NewSporeClient(cc grpc.ClientConnInterface) SporeClient {
	return &sporeClient{cc}
}

func (c *sporeClient) Send(ctx context.Context, in *SendTransaction, opts ...grpc.CallOption) (*SendTransactionReply, error) {
	out := new(SendTransactionReply)
	err := c.cc.Invoke(ctx, "/main.Spore/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SporeServer is the server API for Spore service.
// All implementations must embed UnimplementedSporeServer
// for forward compatibility
type SporeServer interface {
	// Sends a greeting
	Send(context.Context, *SendTransaction) (*SendTransactionReply, error)
	mustEmbedUnimplementedSporeServer()
}

// UnimplementedSporeServer must be embedded to have forward compatible implementations.
type UnimplementedSporeServer struct {
}

func (UnimplementedSporeServer) Send(context.Context, *SendTransaction) (*SendTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSporeServer) mustEmbedUnimplementedSporeServer() {}

// UnsafeSporeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SporeServer will
// result in compilation errors.
type UnsafeSporeServer interface {
	mustEmbedUnimplementedSporeServer()
}

func RegisterSporeServer(s grpc.ServiceRegistrar, srv SporeServer) {
	s.RegisterService(&Spore_ServiceDesc, srv)
}

func _Spore_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SporeServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Spore/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SporeServer).Send(ctx, req.(*SendTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

// Spore_ServiceDesc is the grpc.ServiceDesc for Spore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Spore",
	HandlerType: (*SporeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Spore_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spore.proto",
}
